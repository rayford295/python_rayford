1.14 Exercises

Exercise 1: What is the function of the secondary memory in a computer?
a) Execute all of the computation and logic of the program
b) Retrieve web pages over the Internet
c) Store information for the long term, even beyond a power cycle
d) Take input from the user

c) Store information for the long term, even beyond a power cycle

The primary function of secondary memory in a computer is to store data and information for the long term, even when the computer is powered off. This includes storing files, programs, and other data that is not actively in use by the computer's CPU (Central Processing Unit). Options (a), (b), and (d) do not accurately describe the primary function of secondary memory.

Exercise 2: What is a program?
A program, in the context of computing, is a set of instructions or a sequence of code that is written to perform a specific task or function on a computer. Programs are also referred to as software. They are designed to be executed by a computer's central processing unit (CPU) and can perform a wide range of functions, from simple calculations to complex tasks like word processing, web browsing, video editing, and more.

Programs are typically written in programming languages, such as Python, Java, C++, and many others. These languages provide a way for humans to communicate with computers by specifying the desired operations and logic. Once a program is written, it can be compiled or interpreted (depending on the language) into machine code that the computer can understand and execute.

In summary, a program is a set of instructions written in a programming language that tells a computer how to perform a specific task or function. It is a fundamental component of software that enables computers to perform a wide variety of tasks and functions.

Exercise 3: What is the difference between a compiler and an interpreter?

A compiler and an interpreter are both tools used in the field of software development to convert high-level programming code into machine code that a computer can understand and execute. However, they differ in how they perform this conversion and execute programs:

1. Compiler:
   - A compiler is a program that translates the entire source code of a program written in a high-level programming language into machine code all at once.
   - It produces an executable file or binary that can be run independently without needing the original source code or the compiler itself.
   - Compilation is a separate step from execution. The entire program is compiled before it is executed.
   - If there are errors in the code, the compiler typically generates a list of all errors and warnings, making it necessary to fix them before running the program.
   - Compiled programs tend to run faster because the translation to machine code is done beforehand.

2. Interpreter:
   - An interpreter is a program that reads and executes the source code of a program line by line, one instruction at a time.
   - It does not produce a separate executable file; it directly interprets and executes the code without generating an intermediate machine code.
   - Errors are often detected and reported one at a time, allowing you to fix them on the spot without having to go through the entire code first.
   - Interpreted programs may run slower than compiled ones because the code is translated into machine instructions at runtime.

In summary, the main difference between a compiler and an interpreter is the way they handle source code. A compiler translates the entire code into machine code before execution, producing an independent executable file, while an interpreter executes code line by line without generating a separate executable, often reporting errors as they are encountered. Each approach has its advantages and disadvantages, and the choice between them depends on factors like performance, development speed, and specific language requirements.


Exercise 4: Which of the following contains “machine code”?
a) The Python interpreter
b) The keyboard
c) Python source file
d) A word processing document

So, the correct answer is option (a) - The Python interpreter contains machine code as it interprets and executes the Python program by converting it into machine instructions that the computer's CPU can directly understand and execute.

Exercise 5: What is wrong with the following code:
>>> primt 'Hello world!'
File "<stdin>", line 1
primt 'Hello world!'
^
SyntaxError: invalid syntax
The issue in the provided code is a typographical error. The correct function for printing in Python is print, but there is a typo where you've written primt. Here's the corrected code:
>>> print('Hello world!')
Hello world!

Exercise 6: Where in the computer is a variable such as “x” stored after
the following Python line finishes?
x = 123
a) Central processing unit
b) Main Memory
c) Secondary Memory
d) Input Devices
e) Output Devices

b) Main Memory

After the Python line `x = 123` finishes executing, the variable `x` is stored in the computer's main memory (also known as RAM - Random Access Memory). Main memory is where the computer temporarily stores data and variables that are actively being used by programs. This is in contrast to secondary memory (e.g., hard drives, solid-state drives) which is used for long-term storage of data that persists even when the computer is turned off.

Variables like `x` are stored in main memory so that the CPU can easily access and manipulate them during program execution.

Exercise 7: What will the following program print out:
x = 43
x = x - 1
print(x)
a) 43
b) 42
c) x + 1
d) Error because x = x + 1 is not possible mathematically

b) 42

The program first initializes `x` to 43. Then, it subtracts 1 from the value of `x` with the line `x = x - 1`, so `x` becomes 42. Finally, it prints the value of `x`, which is now 42. So, the program will print out "42".

Exercise 8: Explain each of the following using an example of a human capability: (1) Central processing unit, (2) Main Memory, (3)
Secondary Memory, (4) Input Device, and (5) Output Device. For example, “What is the human equivalent to a Central Processing Unit”?

Certainly! Here's an explanation of each of the computer components with examples related to human capabilities:

1. Central Processing Unit (CPU):
   - Human Equivalent: Brain
   - Explanation: The CPU is like the brain of the computer. It performs all the processing and calculations necessary for the computer to operate. It executes instructions and controls the operation of the computer's hardware. Just as the brain processes information and directs bodily functions, the CPU processes data and controls the computer.

2. Main Memory (RAM - Random Access Memory):
   - Human Equivalent: Short-term Memory
   - Explanation: Main memory, or RAM, is like a computer's short-term memory. It stores data and instructions that the CPU is currently using. It provides quick access to data for active programs, but it is volatile and loses its contents when the computer is powered off, similar to how our short-term memory is temporary and limited in capacity.

3. Secondary Memory (e.g., Hard Drive, SSD):
   - Human Equivalent: Long-term Memory (e.g., books, external storage)
   - Explanation: Secondary memory provides long-term storage for data and programs, similar to how humans rely on long-term memory for storing knowledge and experiences. It retains information even when the computer is turned off, just as our long-term memory can persist for a long time.

4. Input Device (e.g., Keyboard, Mouse):
   - Human Equivalent: Senses (e.g., Eyes, Ears, Skin)
   - Explanation: Input devices are like the senses of a computer. They allow the computer to receive information from the outside world. For example, a keyboard and mouse provide textual and graphical input to the computer, much like how our senses (sight, hearing, touch) allow us to perceive the world around us.

5. Output Device (e.g., Monitor, Printer):
   - Human Equivalent: Speech or Writing
   - Explanation: Output devices are like the means by which a computer communicates with the external world. They display or produce information that the computer wants to convey. For example, a monitor displays text and images, similar to how we speak or write to communicate our thoughts and ideas to others.

These comparisons help illustrate the roles and functions of these computer components by drawing parallels to human capabilities and experiences.

Exercise 9: How do you fix a “Syntax Error”?
To fix a "Syntax Error" in a computer program, you need to identify and correct the mistake in the program's code. A "Syntax Error" occurs when the code violates the rules of the programming language, making it unable to be parsed or understood by the interpreter or compiler. Here's how you can go about fixing a "Syntax Error":

1. **Read the Error Message:** When a "Syntax Error" occurs, the programming environment usually provides an error message that points to the line and location of the error. Carefully read this error message to understand what went wrong.

2. **Review the Code:** Go to the line indicated by the error message and examine the code around that line. Look for any obvious mistakes, such as missing or mismatched parentheses, quotation marks, semicolons, or keywords.

3. **Check for Typos:** Syntax errors can often be caused by simple typos, such as misspelled variable or function names. Ensure that all identifiers are spelled correctly.

4. **Brackets and Parentheses:** Ensure that opening and closing brackets `[ ]`, parentheses `( )`, and braces `{ }` are properly matched and balanced.

5. **Quotation Marks:** Make sure that string literals and characters are enclosed in the correct type of quotation marks (single or double) and that they are properly closed.

6. **Indentation:** Check the code's indentation to ensure that it follows the language's indentation rules. In languages like Python, proper indentation is crucial for code blocks.

7. **Reserved Keywords:** Avoid using reserved keywords as variable or function names, as this can lead to syntax errors.

8. **Semicolons:** In languages like JavaScript and C++, ensure that you've placed semicolons correctly to terminate statements.

9. **Comments:** Sometimes, syntax errors can occur within comments, so review them as well.

10. **Use an Integrated Development Environment (IDE):** Many modern IDEs offer real-time code analysis and highlighting of syntax errors. Take advantage of these tools to identify and correct issues as you code.

11. **Consult Documentation:** If you're unsure about the correct syntax for a specific programming language feature, consult the language's documentation or refer to examples and tutorials.

12. **Test Incrementally:** After making changes to the code, test it incrementally to ensure that each change resolves the syntax error without introducing new ones.

13. **Ask for Help:** If you're unable to identify or fix the error, don't hesitate to seek help from peers, forums, or online programming communities. Sometimes, a fresh pair of eyes can spot the issue.

Once you've identified and corrected the syntax error, you should be able to run your program without encountering that specific error. Keep in mind that syntax errors are a normal part of the programming process, and even experienced programmers encounter them. The key is to learn from these errors and use them as opportunities to improve your coding skills.

Exercise 2: Write a program that uses input to prompt a user for their
name and then welcomes them.
Enter your name: Chuck
Hello Chuck

# Prompt the user for their name
name = input("Enter your name: ")

# Display a welcome message
print("Hello", name)

Exercise 3: Write a program to prompt the user for hours and rate per
hour to compute gross pay.
Enter Hours: 35
Enter Rate: 2.75
Pay: 96.25
We won’t worry about making sure our pay has exactly two digits after the decimal
place for now. If you want, you can play with the built-in Python round function
to properly round the resulting pay to two decimal places.

# Prompt the user for hours worked and rate per hour
hours = float(input("Enter Hours: "))
rate = float(input("Enter Rate: "))

# Calculate the gross pay
pay = hours * rate

# Display the calculated pay
print("Pay:", pay)


Exercise 4: Assume that we execute the following assignment statements:
width = 17
height = 12.0
For each of the following expressions, write the value of the expression and the
type (of the value of the expression).
1. width//2
2. width/2.0
3. height/3
4. 1 + 2 * 5
Use the Python interpreter to check your answers.

width = 17
height = 12.0

# 1. width//2
result1 = width // 2
# The // operator performs integer division, so the result is an integer.
# Value: 17 // 2 = 8
# Type: int
print("1. Value:", result1, "Type:", type(result1))

# 2. width/2.0
result2 = width / 2.0
# The / operator performs floating-point division, so the result is a float.
# Value: 17 / 2.0 = 8.5
# Type: float
print("2. Value:", result2, "Type:", type(result2))

# 3. height/3
result3 = height / 3
# The / operator performs floating-point division, so the result is a float.
# Value: 12.0 / 3 = 4.0
# Type: float
print("3. Value:", result3, "Type:", type(result3))

# 4. 1 + 2 * 5
result4 = 1 + 2 * 5
# Follows the order of operations (multiplication before addition).
# Value: 1 + 2 * 5 = 1 + 10 = 11
# Type: int (since both operands are integers)
print("4. Value:", result4, "Type:", type(result4))

Exercise 5: Write a program which prompts the user for a Celsius temperature, convert the temperature to Fahrenheit, and print out the
converted temperature.

# Prompt the user for a Celsius temperature
celsius = float(input("Enter a Celsius temperature: "))

# Convert Celsius to Fahrenheit
fahrenheit = (celsius * 9/5) + 32

# Display the converted temperature
print("Fahrenheit temperature:", fahrenheit)


Exercise 1: Rewrite your pay computation to give the employee 1.5
times the hourly rate for hours worked above 40 hours.
Enter Hours: 45
Enter Rate: 10
Pay: 475.0


# Prompt the user for hours worked and rate per hour
hours = float(input("Enter Hours: "))
rate = float(input("Enter Rate: "))

# Calculate regular pay (up to 40 hours)
if hours <= 40:
    pay = hours * rate
else:
    # Calculate pay for the first 40 hours at the regular rate
    regular_pay = 40 * rate
    # Calculate pay for the additional hours at 1.5 times the rate
    overtime_pay = (hours - 40) * (rate * 1.5)
    # Total pay includes both regular and overtime pay
    pay = regular_pay + overtime_pay

# Display the calculated pay
print("Pay:", pay)

Exercise 2: Rewrite your pay program using try and except so that your
program handles non-numeric input gracefully by printing a message
and exiting the program. The following shows two executions of the
program:
Enter Hours: 20
Enter Rate: nine
Error, please enter numeric input
Enter Hours: forty
Error, please enter numeric input

try:
    # Prompt the user for hours worked and rate per hour
    hours = float(input("Enter Hours: "))
    rate = float(input("Enter Rate: "))

    # Calculate regular pay (up to 40 hours)
    if hours <= 40:
        pay = hours * rate
    else:
        # Calculate pay for the first 40 hours at the regular rate
        regular_pay = 40 * rate
        # Calculate pay for the additional hours at 1.5 times the rate
        overtime_pay = (hours - 40) * (rate * 1.5)
        # Total pay includes both regular and overtime pay
        pay = regular_pay + overtime_pay

    # Display the calculated pay
    print("Pay:", pay)

except ValueError:
    print("Error, please enter numeric input")

Exercise 3: Write a program to prompt for a score between 0.0 and
1.0. If the score is out of range, print an error message. If the score is
between 0.0 and 1.0, print a grade using the following table:

Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
Enter score: 0.95
A
Enter score: perfect
Bad score
Enter score: 10.0
Bad score
Enter score: 0.75
C
Enter score: 0.5
F
Run the program repeatedly as shown above to test the various different values for
input.

try:
    # Prompt the user for a score between 0.0 and 1.0
    score = float(input("Enter score: "))

    # Check if the score is within the valid range
    if score < 0.0 or score > 1.0:
        print("Bad score")
    else:
        # Determine the grade based on the score
        if score >= 0.9:
            print("A")
        elif score >= 0.8:
            print("B")
        elif score >= 0.7:
            print("C")
        elif score >= 0.6:
            print("D")
        else:
            print("F")

except ValueError:
    print("Bad score")

Exercise 1: Run the program on your system and see what numbers
you get. Run the program more than once and see what numbers you
get.
The random function is only one of many functions that handle random numbers.
The function randint takes the parameters low and high, and returns an integer
between low and high (including both).
>>> random.randint(5, 10)
5
>>> random.randint(5, 10)
9

To choose an element from a sequence at random, you can use choice:
>>> t = [1, 2, 3]
>>> random.choice(t)
2
>>> random.choice(t)
3
The random module also provides functions to generate random values from continuous distributions including Gaussian, exponential, gamma, and a few more.

Exercise 2: Move the last line of this program to the top, so the function
call appears before the definitions. Run the program and see what error
message you get.

greet()

def greet():
    print("Hello, world!")

NameError: name 'greet' is not defined

Exercise 3: Move the function call back to the bottom and move the
definition of print_lyrics after the definition of repeat_lyrics. What
happens when you run this program?

When you move the function call to the bottom and place the definition of `print_lyrics` after the definition of `repeat_lyrics`, you won't encounter any errors when you run the program. Python allows you to define functions before or after their usage in the code because it performs a two-pass compilation. It first scans the code to collect function and variable names and then executes the code.

Here's an example of the modified code:

```python
def repeat_lyrics():
    print_lyrics()
    print_lyrics()

def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print("I sleep all night and I work all day.")

repeat_lyrics()
```

When you run this program, it will produce the following output:

```
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
```

Exercise 4: What is the purpose of the “def” keyword in Python?
a) It is slang that means “the following code is really cool”
b) It indicates the start of a function
c) It indicates that the following indented section of code is to be stored for later
d) b and c are both true
e) None of the above

The correct answer is:
d) b and c are both true

In Python, the "def" keyword is used to indicate the start of a function (option b), and it also indicates that the following indented section of code is to be stored for later and executed when the function is called (option c). So, both statements b and c are true regarding the purpose of the "def" keyword in Python.

Exercise 5: What will the following Python program print out?
def fred():
print("Zap")
def jane():
print("ABC")
jane()
fred()
jane()

The correct answer is:
d) ABC Zap ABC

Here's the explanation:

1. The `jane()` function is called first, which prints "ABC."
2. Then, the `fred()` function is called, which prints "Zap."
3. Finally, the `jane()` function is called again, printing "ABC" once more.

So, the output will be "ABC Zap ABC."

Exercise 6: Rewrite your pay computation with time-and-a-half for overtime and create a function called computepay which takes two parameters
(hours and rate).
Enter Hours: 45
Enter Rate: 10
Pay: 475.0

def computepay(hours, rate):
    if hours <= 40:
        pay = hours * rate
    else:
        regular_pay = 40 * rate
        overtime_pay = (hours - 40) * (rate * 1.5)
        pay = regular_pay + overtime_pay
    return pay

try:
    hours = float(input("Enter Hours: "))
    rate = float(input("Enter Rate: "))

    total_pay = computepay(hours, rate)
    print("Pay:", total_pay)

except ValueError:
    print("Bad input. Please enter numeric values for hours and rate.")

Exercise 7: Rewrite the grade program from the previous chapter using
a function called computegrade that takes a score as its parameter and
returns a grade as a string.
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
Enter score: 0.95
A
Enter score: perfect
Bad score

Enter score: 10.0
Bad score
Enter score: 0.75
C
Enter score: 0.5
F
Run the program repeatedly to test the various different values for inp

def computegrade(score):
    try:
        score = float(score)
        if score < 0.0 or score > 1.0:
            return "Bad score"
        elif score >= 0.9:
            return "A"
        elif score >= 0.8:
            return "B"
        elif score >= 0.7:
            return "C"
        elif score >= 0.6:
            return "D"
        else:
            return "F"
    except ValueError:
        return "Bad score"

while True:
    score = input("Enter score: ")
    if score == "done":
        break
    grade = computegrade(score)
    print(grade)


Exercise 1: Write a program which repeatedly reads numbers until the
user enters “done”. Once “done” is entered, print out the total, count,
and average of the numbers. If the user enters anything other than a
number, detect their mistake using try and except and print an error
message and skip to the next number.


Enter a number: 4
Enter a number: 5
Enter a number: bad data
Invalid input
Enter a number: 7
Enter a number: done
16 3 5.333333333333333

total = 0
count = 0

while True:
    input_str = input("Enter a number: ")

    if input_str == "done":
        break

    try:
        number = float(input_str)
        total += number
        count += 1
    except ValueError:
        print("Invalid input")

if count > 0:
    average = total / count
    print("Total:", total)
    print("Count:", count)
    print("Average:", average)
else:
    print("No valid numbers entered.")

Exercise 2: Write another program that prompts for a list of numbers
as above and at the end prints out both the maximum and minimum of
the numbers instead of the average.

max_num = None
min_num = None

while True:
    input_str = input("Enter a number: ")

    if input_str == "done":
        break

    try:
        number = float(input_str)

        # Update max_num and min_num based on the input
        if max_num is None or number > max_num:
            max_num = number
        if min_num is None or number < min_num:
            min_num = number

    except ValueError:
        print("Invalid input")

if max_num is not None and min_num is not None:
    print("Maximum:", max_num)
    print("Minimum:", min_num)
else:
    print("No valid numbers entered.")

Exercise 1: Write a while loop that starts at the last character in the
string and works its way backwards to the first character in the string,
printing each letter on a separate line, except backwards.

text = "Hello, world!"
index = len(text) - 1  # Start at the last character

while index >= 0:
    print(text[index])
    index -= 1

Exercise 2: Given that fruit is a string, what does fruit[:] mean?

In Python, the slicing notation `fruit[:]` means that you want to create a copy of the entire string `fruit`. It effectively extracts all the characters from the beginning to the end of the string, including both the first character and the last character, and returns a new string containing those characters.

For example, if `fruit` is equal to `"apple"`, then `fruit[:]` would result in a new string `"apple"`. It's a way to make a full copy of the original string.


Exercise 3: Encapsulate this code in a function named count, and generalize it so that it accepts the string and the letter as arguments.

def count(string, letter):
    count = 0
    for char in string:
        if char == letter:
            count += 1
    return count

# Example usage:
fruit = "banana"
target_letter = "a"
result = count(fruit, target_letter)
print(f"There are {result} '{target_letter}'s in '{fruit}'.")

Exercise 4: There is a string method called count that is similar to
the function in the previous exercise. Read the documentation of this
method at:
https://docs.python.org/library/stdtypes.html#string-methods
Write an invocation that counts the number of times the letter a occurs
in “banana”.

word = "banana"
count_a = word.count("a")
print(count_a)

Exercise 5: Take the following Python code that stores a string:
str = 'X-DSPAM-Confidence:0.8475'
Use find and string slicing to extract the portion of the string after the
colon character and then use the float function to convert the extracted
string into a floating point number.

str = 'X-DSPAM-Confidence:0.8475'

# Find the position of the colon character
colon_pos = str.find(':')

# Extract the portion of the string after the colon
extracted_str = str[colon_pos + 1:]

# Convert the extracted string to a floating-point number
confidence = float(extracted_str)

print(confidence)

Exercise 6: Read the documentation of the string methods at
https://docs.python.org/library/stdtypes.html#string-methods. You
might want to experiment with some of them to make sure you
understand how they work. strip and replace are particularly useful.
The documentation uses a syntax that might be confusing. For example,
in find(sub[, start[, end]]), the brackets indicate optional arguments.
So sub is required, but start is optional, and if you include start, then
end is optional.


text = "   Hello, world!   "
stripped_text = text.strip()  # Removes leading and trailing whitespace
print(stripped_text)  # Output: "Hello, world!"

text = "I like apples and apples are red."
replaced_text = text.replace("apples", "oranges")
print(replaced_text)  # Output: "I like oranges and oranges are red."

Exercise 1: Write a program to read through a file and print the contents
of the file (line by line) all in upper case. Executing the program will
look as follows:
python shout.py
Enter a file name: mbox-short.txt
FROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN 5 09:14:16 2008
RETURN-PATH: <POSTMASTER@COLLAB.SAKAIPROJECT.ORG>
RECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])
BY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;
SAT, 05 JAN 2008 09:14:16 -0500
You can download the file from www.py4e.com/code3/mbox-short.txt

# Prompt the user for a file name
file_name = input("Enter a file name: ")

try:
    # Open the file for reading
    with open(file_name, 'r') as file:
        # Read each line from the file and print it in uppercase
        for line in file:
            print(line.upper(), end='')

except FileNotFoundError:
    print(f"File '{file_name}' not found.")

except Exception as e:
    print("An error occurred:", str(e))


Exercise 2: Write a program to prompt for a file name, and then read
through the file and look for lines of the form:
X-DSPAM-Confidence: 0.8475
When you encounter a line that starts with “X-DSPAM-Confidence:”
pull apart the line to extract the floating-point number on the line.
Count these lines and then compute the total of the spam confidence
90 CHAPTER 7. FILES
values from these lines. When you reach the end of the file, print out
the average spam confidence.
Enter the file name: mbox.txt
Average spam confidence: 0.894128046745
Enter the file name: mbox-short.txt
Average spam confidence: 0.750718518519
Test your file on the mbox.txt and mbox-short.txt files.

# Prompt the user for a file name
file_name = input("Enter the file name: ")

try:
    # Open the file for reading
    with open(file_name, 'r') as file:
        total_confidence = 0.0
        count = 0

        # Iterate through the lines in the file
        for line in file:
            # Check if the line starts with 'X-DSPAM-Confidence:'
            if line.startswith('X-DSPAM-Confidence:'):
                # Split the line and extract the floating-point number
                parts = line.split(':')
                confidence = float(parts[1].strip())

                # Update total and count
                total_confidence += confidence
                count += 1

        if count > 0:
            # Calculate and print the average spam confidence
            average_confidence = total_confidence / count
            print(f"Average spam confidence: {average_confidence:.12f}")
        else:
            print("No 'X-DSPAM-Confidence:' lines found in the file.")

except FileNotFoundError:
    print(f"File '{file_name}' not found.")

except Exception as e:
    print("An error occurred:", str(e))


Exercise 3: Sometimes when programmers get bored or want to have a
bit of fun, they add a harmless Easter Egg to their program. Modify
the program that prompts the user for the file name so that it prints a
funny message when the user types in the exact file name “na na boo
boo”. The program should behave normally for all other files which
exist and don’t exist. Here is a sample execution of the program:
python egg.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt
python egg.py
Enter the file name: missing.tyxt
File cannot be opened: missing.tyxt
python egg.py
Enter the file name: na na boo boo
NA NA BOO BOO TO YOU - You have been punk'd!
We are not encouraging you to put Easter Eggs in your programs; 

# Prompt the user for a file name
file_name = input("Enter the file name: ")

if file_name == "na na boo boo":
    print("NA NA BOO BOO TO YOU - You have been punk'd!")
else:
    try:
        # Open the file for reading
        with open(file_name, 'r') as file:
            count = 0

            # Iterate through the lines in the file
            for line in file:
                count += 1

            # Print the number of lines (subject lines) in the file
            print(f"There were {count} subject lines in {file_name}")

    except FileNotFoundError:
        print(f"File cannot be opened: {file_name}")

    except Exception as e:
        print("An error occurred:", str(e))

Exercise 1: Write a function called chop that takes a list and modifies
it, removing the first and last elements, and returns None. Then write
a function called middle that takes a list and returns a new list that
contains all but the first and last elements

def chop(lst):
    if len(lst) >= 2:
        del lst[0]  # Remove the first element
        del lst[-1]  # Remove the last element
    else:
        lst.clear()  # If the list has less than 2 elements, clear the list

def middle(lst):
    if len(lst) >= 3:
        return lst[1:-1]  # Return a new list containing elements from index 1 to len(lst)-2
    else:
        return []

# Example usage:
my_list = [1, 2, 3, 4, 5]
chop(my_list)
print(my_list)  # This will print: [2, 3, 4]

my_list = [1, 2, 3, 4, 5]
new_list = middle(my_list)
print(new_list)  # This will print: [2, 3, 4]



















